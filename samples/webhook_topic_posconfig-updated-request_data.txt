THIS IS POST REQUEST JSON BODY:
{
    "POS": {
        "MerchantsiteUid": "b829cca8-b762-4bee-9ebb-ca5a6665618e",
        "company": {
            "Address": "Test adresa 1-32",
            "Country": "Srbija",
            "LogoFile": "u45-1749643650341-smile.jpg",
            "Name": "FIRMA ZA TEST DOO 1",
            "RegNo": "233234",
            "TaxNo": "3243253245",
            "Warehouses": {
                "default": {
                    "Uid": "default",
                    "Name": "Glavni magacin 1",
                    "Country": "Srbija",
                    "City": "Beograd",
                    "PostalCode": "21000",
                    "StreetName": "Dusana Petrovica Saneta",
                    "StreetNumber": "26A"
                },
                "skladiste2": {
                    "Uid": "skladiste2",
                    "Name": "Nase malo drugo skladiste",
                    "Country": "Srbija",
                    "City": "Beograd",
                    "PostalCode": "11000",
                    "StreetName": "Teslina",
                    "StreetNumber": "26A"
                }
            },
            "HPayCompanyId": 106
        },
        "valid_urls": [
            "magentodemo.holest.com",
            "magentodemo.holest.com/holestpay/result/webhook"
        ],
        "SiteType": "site-standard",
        "CustomerServiceEmail": null,
        "CustomerServiceTel": null,
        "CustomerServiceNotes": null,
        "TermsLink": null,
        "KeyValidTill": null,
        "POSIsActivated": true,
        "SubscriptionsUnlocked": true,
        "PaymentsUnlocked": true,
        "ShippingUnlocked": true,
        "FiscalUnlocked": true,
        "Environment": "sandbox",
        "payment": [
            {
                "HPaySiteMethodId": 319,
                "Uid": "nbs_ips_skeniraj_pt",
                "Enabled": true,
                "ProcessGroup": null,
                "PaymentMethod": "nbs_ips_skeniraj_pt",
                "SystemTitle": "IPS Skeniraj smartphone ili QR",
                "Instant": true,
                "PaymentType": "banktransfer-instant",
                "Splitpay": false,
                "Fallback": false,
                "HPCardPay": false,
                "SubsciptionsType": "emulated",
                "POps": "refund",
                "Order": 0,
                "UTS": 1755939293000,
                "localized": {
                    "en": {
                        "Name": "IPS Scan",
                        "Description": "<p>Scan IPS QR code from your bank app <span style=\"color: rgb(33,43,54);background-color: rgb(255,255,255);font-size: 16px;font-family: Public Sans\" ,=\"\" sans-serif;\"=\"\"> to pay</span> </p>\n",
                        "Desktop Pay Description": "Skenirajte QR kod iz aplikacije Vaše banke da bi platili. Ovo je instant plaćanje i Vaša naruđbina će odmah biti označena kao plaćena.",
                        "Mobile Pay Description": "1 - Odaberite da li plaćate kao fizičko ili pravno lice. 2 - Potom odaberite banku čiju aplikaciju koristite da bi pokrenuli IPS plaćanje. Alternativno možete pokrenuti 'IPS skeniraj' sa drugog uređaja u aplikaciji mobilnog bankarstva da bi skenirali gornji QR kod ili možete slikati gornji QR kod sa drugog uređaja da bi potom skenirali isti preko opcije 'IPS skeniraj' sa ovog uređaja. Ovo je instant plaćanje i Vaša naruđbina će odmah biti označena kao plaćena.",
                        "Maximum Wait Timout - min": "8",
                        "TEST Simulate success": "1",
                        "PaymentCurrency": "RSD",
                        "Excluded Countries": [],
                        "Only For Countries": []
                    }
                },
                "Name": "IPS Skeniraj",
                "Description": "Skenirajte IPS QR kod i platite brzo iz aplikacije Vaše banke. Ako pristupate preko telefona možete direktno inicirati pokretanje aplikacije vaše banke.",
                "Desktop Pay Description": "Skenirajte QR kod iz aplikacije Vaše banke da bi platili. Ovo je instant plaćanje i Vaša naruđbina će odmah biti označena kao plaćena.",
                "Mobile Pay Description": "1 - Odaberite da li plaćate kao fizičko ili pravno lice. 2 - Potom odaberite banku čiju aplikaciju koristite da bi pokrenuli IPS plaćanje. Alternativno možete pokrenuti 'IPS skeniraj' sa drugog uređaja u aplikaciji mobilnog bankarstva da bi skenirali gornji QR kod ili možete slikati gornji QR kod sa drugog uređaja da bi potom skenirali isti preko opcije 'IPS skeniraj' sa ovog uređaja. Ovo je instant plaćanje i Vaša naruđbina će odmah biti označena kao plaćena.",
                "Hidden": null,
                "Maximum Wait Timout - min": "8",
                "TEST Simulate success": "1",
                "TEST Force Smartphone": false,
                "PaymentCurrency": "RSD",
                "DeepLinks": {
                    "AIK BANKА": {
                        "fl": "http://test-ebanking.aikbanka.rs/ips/ek/fl/",
                        "pl": "https://test-ebanking.aikbanka.rs/ips/ek/pl/"
                    },
                    "ADDIKO BANK": {
                        "fl": "https://www.addiko.rs/ips/ek/fl/"
                    },
                    "ALTA BANKA": {
                        "fl": "https://altabankatest.24x7.rs/ips/ek/fl/"
                    },
                    "BANCA INTESA": {
                        "fl": "https://ipspos.bancaintesa.rs/ips/ek/fl/",
                        "pl": "https://ipspos.bancaintesa.rs/ips/ek/pl/"
                    },
                    "BANKA POŠTANSKA ŠTEDIONICA": {
                        "fl": "https://www.posted.co.rs/ips/ek/fl/",
                        "pl": "https://www.posted.co.rs/ips/ek/pl/"
                    },
                    "BANKA POŠTANSKA ŠTEDIONICA – NOVA APP": {
                        "fl": "http://uat1.mtsbanka.rs/ips/ek/fl/"
                    },
                    "ERSTE BANK": {
                        "fl": "https://ersteuat.24x7.rs/ips/ek/fl/",
                        "pl": "https://erstetitanuat.erstebank.rs/ips/ek/pl/"
                    },
                    "EUROBANK-DIREKTNA BANKA": {
                        "fl": "https://eurobank-direktnatest.24x7.rs/ips/ek/fl/",
                        "pl": "https://eurobank-direktnatest.24x7.rs/ips/ek/pl/"
                    },
                    "HALKBANK": {
                        "fl": "https://halkbankatest.24x7.rs/ips/ek/fl/"
                    },
                    "NLB KOMERCIJALNA BANKA": {
                        "fl": "https://mbanktestkombank.24x7.rs/ips/ek/fl/"
                    },
                    "OTP BANKА": {
                        "fl": "https://digital.voban.rs/ips/ek/fl/"
                    },
                    "RAIFFEISEN BANKA": {
                        "fl": "https://rol.raiffeisenbank.rs/ips/ek/fl/"
                    },
                    "RBA BANKА": {
                        "fl": "https://rbabanking.rbabanka.rs/ips/ek/fl/"
                    },
                    "SRPSKA BANKA": {
                        "fl": "https://srpskabankatest.24x7.rs/ips/ek/fl/"
                    },
                    "UNICREDIT BANK": {
                        "fl": "https://rs-uat.mobilecrew.xyz/ips/ek/fl/",
                        "pl": "https://rs-uat.mobilecrew.xyz/ips/ek/pl/"
                    },
                    "YETTEL BANK": {
                        "fl": "https://t2.online.mobibanka.rs/ips/ek/fl/"
                    }
                },
                "PayInputUrl": "https://sandbox.pay.holest.com/clientpay/cscripts/hpay-control-frm/v202521/sandbox/index.html",
                "Minimal Order Amount": null,
                "Maximal Order Amount": null,
                "Excluded Countries": [],
                "Only For Countries": [],
                "Enable Terms & Conditions acceptance": null,
                "Backend Name": "IPS",
                "orderActions": "function(order){\r\n\t  if(!order)\r\n\t\t  return [];\r\n\t  \r\n\t  let pm = this;\r\n\t  \r\n\t  let pmid = pm.id || pm.HPaySiteMethodId;\r\n\t  let pmuid = pm.Uid;\r\n\t  \r\n\t  if(!((order.HPOSPaymentMethodId || order.CompanySitePaymentMethodId) == pmid || order.Data.pay_method_uid == pmuid))\r\n\t\t  return [];\r\n\t  \r\n\t  let handlers_url = \"https://sandbox.pay.holest.com/clientpay/handlers/payment/\";\r\n\t  if(typeof HPay !== 'undefined' && HPay && HPay.getMerchantSiteUid){\r\n\t\t  handlers_url += HPay.getMerchantSiteUid();\r\n\t  }else{\r\n\t\t  handlers_url += String(order.CompanySiteId);\r\n\t  }\r\n\t  handlers_url += (\"/\" + pm.Uid + \"/\" + order.Uid);\r\n\t  \r\n\t  let PaymentCurrency = pm.PaymentCurrency || pm.Data.parameters.PaymentCurrency;\r\n\t  let __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t  }\r\n\t  \r\n\t  let hactions = [];\r\n\t  \r\n\t  if(order.Transactions && order.Transactions.length){\r\n\t\t  hactions.push({\r\n\t\t\t    Caption: __(\"Sync on POS\"),\r\n\t\t\t\tOp: \"sync\",\r\n\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\tfetch(handlers_url + \"/syncOnPOS\",{\r\n\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t  });\r\n\t  }\r\n\t  \r\n\t  if(/PAYMENT\\:PAID|PAYMENT:RESERVED|PAYMENT:SUCCESS|PAYMENT:PARTIALLY-REFUNDED/.test(order.Status)){\r\n\t\t  let cap = __(\"Refund\");\r\n\t\t  let op  = \"refundRequest\";\r\n\t\t  \r\n\t\t  hactions.push({\r\n\t\t\t\t\tCaption: cap,\r\n\t\t\t\t\tOp: \"refund\",\r\n\t\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet amt_hint  = \"\";\r\n\t\t\t\t\t\tlet refunded  = 0.00;\r\n\t\t\t\t\t\tlet curr_hint = PaymentCurrency;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ord.Transactions && ord.Transactions.length){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tord.Transactions.forEach(t => {\r\n\t\t\t\t\t\t\t\tif (typeof t.Data === 'string' || t.Data instanceof String){\r\n\t\t\t\t\t\t\t\t\tt.Data = JSON.parse(t.Data);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(t.Data && t.Data.result){\r\n\t\t\t\t\t\t\t\t\tamt_hint  = t.Data.result.payment_amount;\r\n\t\t\t\t\t\t\t\t\tcurr_hint = t.Data.result.payment_currency;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(t.Data.result.refunded_amount){\r\n\t\t\t\t\t\t\t\t\t\trefunded += (parseFloat(t.Data.result.refunded_amount) || 0);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tamt_hint = parseFloat(parseFloat(amt_hint) - refunded).toFixed(2);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet cnt  = document.createElement(\"div\");\r\n\t\t\t\t\t\tlet size = \"normal\";\r\n\t\t\t\t\t\tlet ptbl = null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ord && ord.Data && ord.Data.items && ord.Data.items.length){\r\n\t\t\t\t\t\t\tsize = 'medium';\r\n\t\t\t\t\t\t\tptbl = hpay_generate_items_payment_table(ord,op == \"refundRequest\" ? \"refund\" : \"capture\", null, \"RSD\");\r\n\t\t\t\t\t\t\tcnt.appendChild(ptbl);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tcnt.innerHTML = '<p style=\"padding:12px;\"><b>' + cap + \"</b>: \" + ord.Name  + \"? \" + __(\"Please enter amount in the payment currency. Leave empty for the full amount\") + \": <input value='\" + (amt_hint || \"0.00\") +\"' sytyle='padding:6px' type='number' class='hpay-amount-prompt' /> \" + (curr_hint || \"\") + \".</p>\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\thpay_confirm_dialog(cnt, size, __(\"OK\"), __(\"Cancel\")).then(is_ok => {\r\n\r\n\t\t\t\t\t\t\tif(is_ok){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet inp = null;\r\n\t\t\t\t\t\t\t\tif(ptbl){\r\n\t\t\t\t\t\t\t\t\tinp = ptbl.querySelector(\".hpay-price-table-amount\");\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tinp = document.querySelector(\".hpay-amount-prompt:last-child\");\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(inp){\r\n\t\t\t\t\t\t\t\t\tlet amount = inp.value;\r\n\t\t\t\t\t\t\t\t\tif(String(amount).trim()){\r\n\t\t\t\t\t\t\t\t\t\tamount = parseFloat(String(amount).trim());\r\n\t\t\t\t\t\t\t\t\t\treq.total = amount; \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(ptbl){\r\n\t\t\t\t\t\t\t\t\tlet order_items = ord.Data.items;\r\n\t\t\t\t\t\t\t\t\tif(ptbl.hpay_dst_object){\r\n\t\t\t\t\t\t\t\t\t\tObject.values(ptbl.hpay_dst_object).forEach((item, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif(op == \"refundRequest\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet refund_qty = parseInt(item.refund_qty) || 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet refund = parseFloat(item.refund ) || 0.00;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(refund > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded = (parseFloat(order_items[index].refunded) || 0.00) +  refund;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(refund_qty){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].qty -= refund_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded_qty = (parseInt(order_items[index].refunded_qty) || 0) + refund_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet capture_qty = parseInt(item.capture_qty) || 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet capture = parseFloat(item.capture ) || 0.00;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].captured = (parseFloat(order_items[index].captured) || 0) + capture;\r\n\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].captured_qty = parseInt(order_items[index].captured_qty || 0) + capture_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(order_items[index].captured < order_items[index].subtotal){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded += ((parseFloat(order_items[index].subtotal) || 0) - (parseFloat(order_items[index].captured) || 0));\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(order_items[index].captured_qty < order_items[index].qty){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded_qty += (parseInt(order_items[index].qty) - parseInt(order_items[index].captured_qty));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].qty = order_items[index].captured_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\treq.order_items = order_items;\r\n\t\t\t\t\t\t\t\t\t\tif(ptbl.restock){\r\n\t\t\t\t\t\t\t\t\t\t\treq.restock = 1;\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\t\t\t\tfetch(handlers_url + \"/\" + op,{\r\n\t\t\t\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\t\t\t\t\t\twindow.hpay_accept_op_data(r,op.replace(\"Request\",\"\"));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.error){\r\n\t\t\t\t\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r.error, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\")\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t  \r\n\t  }\r\n\t  \r\n\t  return hactions;\r\n\t  \r\n  }",
                "subscriptionActions": "function(subscription){\r\n\t  \r\n\t  \r\n  }",
                "transactionActions": "function(transaction){\r\n\t  \r\n\t  \r\n  }"
            },
            {
                "HPaySiteMethodId": 318,
                "Uid": "nestpay_redirect",
                "Enabled": true,
                "ProcessGroup": null,
                "PaymentMethod": "nestpay_redirect",
                "SystemTitle": "NestPay 3D_pay_hosting",
                "Instant": true,
                "PaymentType": "SMS",
                "Splitpay": false,
                "Fallback": false,
                "HPCardPay": false,
                "SubsciptionsType": "emulated",
                "POps": "refund,void,capture",
                "Order": 0,
                "UTS": 1755940996000,
                "localized": {
                    "en": {
                        "Bank/Fin. name": "Banca Intesa AD Beograd",
                        "Name": "Pay by card -  redirect",
                        "Description": "<p>Pay with VISA, Maestro, Mastercard, AMEX or DINA cards</p>\n",
                        "PaymentType": "SMS",
                        "PaymentCurrency": "RSD",
                        "Excluded Countries": [],
                        "Only For Countries": []
                    }
                },
                "Bank/Fin. name": "Banca Intesa AD Beograd",
                "Name": "Plati karticom - redirekcija",
                "Description": "Platite VISA, Maestro, Mastercard, AMEX ili DINA karticama",
                "Hidden": null,
                "PaymentCurrency": "RSD",
                "Minimal Order Amount": null,
                "Maximal Order Amount": null,
                "Excluded Countries": [],
                "Only For Countries": [],
                "Enable Terms & Conditions acceptance": null,
                "Backend Name": null,
                "initActions": "function(){\r\n\t  //\r\n  }",
                "orderActions": "function(order){\r\n\t  \r\n\t  if(!order)\r\n\t\t  return [];\r\n\t  \r\n\t  let pm = this;\r\n\t  \r\n\t  let pmid = pm.id || pm.HPaySiteMethodId;\r\n\t  let pmuid = pm.Uid;\r\n\t  \r\n\t  if(!((order.HPOSPaymentMethodId || order.CompanySitePaymentMethodId) == pmid || order.Data.pay_method_uid == pmuid))\r\n\t\t  return [];\r\n\t  \r\n\t  let handlers_url = \"https://sandbox.pay.holest.com/clientpay/handlers/payment/\";\r\n\t  if(typeof HPay !== 'undefined' && HPay && HPay.getMerchantSiteUid){\r\n\t\t  handlers_url += HPay.getMerchantSiteUid();\r\n\t  }else{\r\n\t\t  handlers_url += String(order.CompanySiteId);\r\n\t  }\r\n\t  handlers_url += (\"/\" + pm.Uid + \"/\" + order.Uid);\r\n\t  \r\n\t  let PaymentCurrency = pm.PaymentCurrency || pm.Data.parameters.PaymentCurrency;\r\n\t  let __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t  }\r\n\t  \r\n\t  let hactions = [\r\n\t\t{\r\n\t\t\tCaption: __(\"Status query...\"),\r\n\t\t\tOp: \"query\",\r\n\t\t\tRun: function(ord){\r\n\t\t\t\t\r\n\t\t\t\tlet req = {\r\n\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\tfetch(handlers_url + \"/queryRequest\",{\r\n\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\t\twindow.hpay_accept_op_data(r,r.request_type);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t  ];\r\n\t  \r\n\t  if(order.Transactions && order.Transactions.length){\r\n\t\t  hactions.push({\r\n\t\t\t    Caption: __(\"Sync on POS\"),\r\n\t\t\t\tOp: \"sync\",\r\n\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\tfetch(handlers_url + \"/syncOnPOS\",{\r\n\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t  });\r\n\t  }\r\n\t  \r\n\t  if(/PAYMENT\\:PAID|PAYMENT\\:PAYING|PAYMENT:RESERVED|PAYMENT:SUCCESS|PAYMENT:PARTIALLY-REFUNDED/.test(order.Status)){\r\n\t\t  \r\n\t\t  if(!/PAYMENT:PARTIALLY-REFUNDED/.test(order.Status)){\r\n\t\t\t  hactions.push({\r\n\t\t\t\t\tCaption: __(\"VOID\"),\r\n\t\t\t\t\tOp: \"void\",\r\n\t\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\thpay_confirm_dialog('<p style=\"padding:12px;\"><b>VOID</b> payment for order ' + ord.Name + \"?</p>\", \"\", __(\"OK\"), __(\"Cancel\")).then(is_ok => {\r\n\t\t\t\t\t\t\tif(is_ok){\r\n\t\t\t\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\t\t\t\tfetch(handlers_url + \"/voidRequest\",{\r\n\t\t\t\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\t\t\t\t\t\twindow.hpay_accept_op_data(r,\"void\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.error){\r\n\t\t\t\t\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r.error, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t  });\r\n\t\t  }\r\n\t\t  \r\n\t\t  let cap = null;\r\n\t\t  let op  = null;\r\n\t\t  \r\n\t\t  if(!/PAYMENT:RESERVED/.test(order.Status)){\r\n\t\t\t  cap = __(\"Refund\");\r\n\t\t      op  = \"refundRequest\";\r\n\t\t  }else{\r\n\t\t\t  cap = __(\"Capture\");\r\n\t\t      op  = \"captureRequest\";\r\n\t\t  }\r\n\t\t  \r\n\t\t  hactions.push({\r\n\t\t\t\t\tCaption: cap,\r\n\t\t\t\t\tOp: op.replace(\"Request\",\"\"),\r\n\t\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet amt_hint  = \"\";\r\n\t\t\t\t\t\tlet refunded  = 0.00;\r\n\t\t\t\t\t\tlet curr_hint = PaymentCurrency;\r\n\t\t\t\t\t\tlet last_success_tran = null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(typeof _transactions !== undefined && !ord.Transactions){\r\n\t\t\t\t\t\t\tord.Transactions = _transactions.filter(t => t.OrderId == ord.id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ord.Transactions && ord.Transactions.length){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tord.Transactions.forEach(t => {\r\n\t\t\t\t\t\t\t\tif (typeof t.Data === 'string' || t.Data instanceof String){\r\n\t\t\t\t\t\t\t\t\tt.Data = JSON.parse(t.Data);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(t.Data && t.Data.result && /SUCCESS|PAID|RESERVED/.test(t.Status)){\r\n\t\t\t\t\t\t\t\t\tamt_hint  = t.Data.result.payment_amount;\r\n\t\t\t\t\t\t\t\t\tcurr_hint = t.Data.result.payment_currency;\r\n\t\t\t\t\t\t\t\t\tlast_success_tran = t;\r\n\t\t\t\t\t\t\t\t\tif(t.Data.result.refunded_amount){\r\n\t\t\t\t\t\t\t\t\t\trefunded += (parseFloat(t.Data.result.refunded_amount) || 0);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tamt_hint = parseFloat(parseFloat(amt_hint) - refunded).toFixed(2);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet minstallments_message = \"\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(last_success_tran && op == \"refundRequest\" && ord && ord.Data && ord.Data.monthly_installments){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(typeof last_success_tran.Data === 'string' || last_success_tran.Data instanceof String){\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tlast_success_tran.Data = JSON.parse(last_success_tran.Data);\r\n\t\t\t\t\t\t\t\t}catch(jex){\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tminstallments_message = \"<pre style='white-space: pre-wrap;font-size: 80%;background: #fffeed;padding: 10px;'>\";\r\n\t\t\t\t\t\t\tminstallments_message += \"Plaćanja sa ratama se ne mogu programski refundirati. Pošaljite mail sa sledećim podacima banci (za intesu: bo_pos@bancaintesa.rs):\\r\\n\";\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n1. Datum i vreme nastanka transakcije: <i class='nprefund-tdate' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n2. ID e commerce terminala: <i class='nprefund-mid' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n3. Poslednja 4 broja i naziv kartice: <i class='nprefund-card4' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n4. Autorizacija/Br. Odobrenja: <i class='nprefund-auth' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n5. Iznos RSD: <i class='nprefund-amt' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n6. Iznos za storno RSD: <i class='nprefund-ramt' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n7. Broj rata: \" + ord.Data.monthly_installments + \"\\r\\n\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n7. Kada dobijete potvrdu od banke možete izvršiti 'Postavi kao da je refundirano'.\\r\\n\");\r\n\t\t\t\t\t\t\tminstallments_message += \"</pre>\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet qreq = {\r\n\t\t\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tHPayGeneratePOSRequestSignature(qreq).then(vhash => {\r\n\t\t\t\t\t\t\t\tqreq.verificationhash = vhash;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfetch(handlers_url + \"/queryRequest\",{\r\n\t\t\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tbody: JSON.stringify(qreq)\r\n\t\t\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(r && r.Response){\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(!r.Extra){\r\n\t\t\t\t\t\t\t\t\t\t\tr.Extra = {};\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-tdate')) el.innerHTML = r.Extra.AUTH_DTTM || \"\"; \r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-mid')) el.innerHTML = r.mid || \"\"; \r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-card4')) {\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tif((r.Extra.PAN || \"\")[0] == \"9\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"DINA \";\r\n\t\t\t\t\t\t\t\t\t\t\t}else if((r.Extra.PAN || \"\")[0] == \"5\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"MASTER \";\r\n\t\t\t\t\t\t\t\t\t\t\t}else if((r.Extra.PAN || \"\")[0] == \"4\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"VISA \";\r\n\t\t\t\t\t\t\t\t\t\t\t}else if((r.Extra.PAN || \"\")[0] == \"3\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"AMEX \";\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tel.innerHTML += (r.Extra.PAN || \"\").substr(-4);\r\n\t\t\t\t\t\t\t\t\t\t}; \t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-auth')) el.innerHTML = last_success_tran.Data.result.gateway_resp.AuthCode; \r\n\t\t\t\t\t\t\t\t\t\t}catch(oc){}\r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-amt')) el.innerHTML = (parseFloat(r.Extra.ORIG_TRANS_AMT || \"0.00\") / 100).toFixed(2); \r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-ramt')) el.innerHTML = (parseFloat(r.Extra.ORIG_TRANS_AMT || \"0.00\") / 100).toFixed(2);; \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet cnt  = document.createElement(\"div\");\r\n\t\t\t\t\t\tlet size = \"normal\";\r\n\t\t\t\t\t\tlet ptbl = null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ord && ord.Data && ord.Data.items && ord.Data.items.length){\r\n\t\t\t\t\t\t\tsize = 'medium';\r\n\t\t\t\t\t\t\tptbl = hpay_generate_items_payment_table(ord,op == \"refundRequest\" ? \"refund\" : \"capture\", null,curr_hint);\r\n\t\t\t\t\t\t\tcnt.appendChild(ptbl);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tcnt.innerHTML = '<p style=\"padding:12px;\"><b>' + cap + \"</b>: \" + ord.Name  + \"? \" + __(\"Please enter amount in the payment currency. Leave empty for the full amount\") + \": <input value='\" + (amt_hint || \"0.00\") +\"' sytyle='padding:6px' type='number' class='hpay-amount-prompt' /> \" + (curr_hint || \"\") + \".</p>\" + minstallments_message;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\thpay_confirm_dialog(cnt, size , minstallments_message ? __(\"Mark as refunded\") : __(\"OK\"), __(\"Cancel\")).then((is_ok) => {\r\n\r\n\t\t\t\t\t\t\tif(is_ok){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet inp = null;\r\n\t\t\t\t\t\t\t\tif(ptbl){\r\n\t\t\t\t\t\t\t\t\tinp = ptbl.querySelector(\".hpay-price-table-amount\");\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tinp = document.querySelector(\".hpay-amount-prompt:last-child\");\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(inp){\r\n\t\t\t\t\t\t\t\t\tlet amount = inp.value;\r\n\t\t\t\t\t\t\t\t\tif(String(amount).trim()){\r\n\t\t\t\t\t\t\t\t\t\tamount = parseFloat(String(amount).trim());\r\n\t\t\t\t\t\t\t\t\t\treq.total = amount; \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(ptbl){\r\n\t\t\t\t\t\t\t\t\tlet order_items = ord.Data.items;\r\n\t\t\t\t\t\t\t\t\tif(ptbl.hpay_dst_object){\r\n\t\t\t\t\t\t\t\t\t\tObject.values(ptbl.hpay_dst_object).forEach((item, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif(op == \"refundRequest\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet refund_qty = parseInt(item.refund_qty) || 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet refund = parseFloat(item.refund ) || 0.00;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(refund > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded = (parseFloat(order_items[index].refunded) || 0.00) +  refund;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(refund_qty){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].qty -= refund_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded_qty = (parseInt(order_items[index].refunded_qty) || 0) + refund_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet capture_qty = parseInt(item.capture_qty) || 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet capture = parseFloat(item.capture ) || 0.00;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].captured = (parseFloat(order_items[index].captured) || 0) + capture;\r\n\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].captured_qty = parseInt(order_items[index].captured_qty || 0) + capture_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(order_items[index].captured < order_items[index].subtotal){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded += ((parseFloat(order_items[index].subtotal) || 0) - (parseFloat(order_items[index].captured) || 0));\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(order_items[index].captured_qty < order_items[index].qty){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded_qty += (parseInt(order_items[index].qty) - parseInt(order_items[index].captured_qty));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].qty = order_items[index].captured_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\treq.order_items = order_items;\r\n\t\t\t\t\t\t\t\t\t\tif(ptbl.restock){\r\n\t\t\t\t\t\t\t\t\t\t\treq.restock = 1;\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(minstallments_message){\r\n\t\t\t\t\t\t\t\t\treq.manually_mark_refunded = 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\t\t\t\tfetch(handlers_url + \"/\" + op,{\r\n\t\t\t\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\t\t\t\t\t\twindow.hpay_accept_op_data(r,op.replace(\"Request\",\"\"));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.error){\r\n\t\t\t\t\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r.error, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\")\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t  }\r\n\t  return hactions;\r\n  }",
                "subscriptionActions": "function(subscription){\r\n\t  \r\n  }",
                "transactionActions": "function(transaction){\r\n\t  \r\n  }"
            },
            {
                "HPaySiteMethodId": 317,
                "Uid": "nestpay_3d",
                "Enabled": true,
                "ProcessGroup": null,
                "PaymentMethod": "nestpay_3d",
                "SystemTitle": "NestPay 3D + API",
                "Instant": true,
                "PaymentType": "SMS",
                "Splitpay": true,
                "Fallback": true,
                "HPCardPay": true,
                "SubsciptionsType": "cof-tokenization",
                "POps": "charge,refund,void,capture,cardsave,charge_installmets",
                "Order": 0,
                "UTS": 1755938890000,
                "localized": {
                    "en": {
                        "Bank/Fin. name": "Banka Intesa AD Beograd",
                        "Name": "Pay by card",
                        "Description": "<p>Pay with VISA, Maestro, Mastercard, AMEX or DINA cards</p>\n",
                        "PaymentType": "SMS",
                        "PaymentCurrency": "RSD",
                        "Nestpay Installments Capable": true,
                        "Installments BIN Table": [
                            {
                                "BINs": "484187",
                                "Available installments": "2,3,4-12",
                                "Additional Cost Percent": 0,
                                "Additional Cost Fixed": 0,
                                "Minimal Total": 0
                            }
                        ],
                        "Excluded Countries": [],
                        "Only For Countries": [],
                        "Card line branding": {
                            "VISA": 1,
                            "MASTER": 1,
                            "MAESTRO": 1,
                            "DINA": 1,
                            "DINNERS": 0,
                            "AMEX": 1,
                            "JCB": 0,
                            "VISA SECURE": 1,
                            "MASTER ID CHECK": 1,
                            "UNIONPAY": 0,
                            "APPLE PAY": 0,
                            "GOOGLE PAY": 0
                        }
                    }
                },
                "Bank/Fin. name": "Banka Intesa AD Beograd",
                "Name": "Plati karticom",
                "Description": "Platite VISA, Maestro, Mastercard, AMEX ili DINA karticama",
                "Hidden": null,
                "PaymentCurrency": "RSD",
                "Nestpay Installments Capable": true,
                "Installments BIN Table": [
                    {
                        "BINs": "484187",
                        "Available installments": "2,3,4-12",
                        "Additional Cost Percent": 0,
                        "Additional Cost Fixed": 0,
                        "Minimal Total": 0
                    }
                ],
                "Minimal Order Amount": null,
                "Maximal Order Amount": null,
                "Excluded Countries": [],
                "Only For Countries": [],
                "Enable Terms & Conditions acceptance": null,
                "Backend Name": null,
                "Bank Logo": null,
                "Bank Logo Url": null,
                "PayInputUrl": "https://sandbox.pay.holest.com/clientpay/cscripts/hpay-control-frm/v202521/sandbox/index.html",
                "Card line branding": {
                    "VISA": 1,
                    "MASTER": 1,
                    "MAESTRO": 1,
                    "DINA": 1,
                    "DINNERS": 0,
                    "AMEX": 1,
                    "JCB": 0,
                    "VISA SECURE": 1,
                    "MASTER ID CHECK": 1,
                    "UNIONPAY": 0,
                    "APPLE PAY": 0,
                    "GOOGLE PAY": 0
                },
                "initActions": "function(){\r\n\t  //\r\n  }",
                "orderActions": "function(order){\r\n\t  \r\n\t  if(!order)\r\n\t\t  return [];\r\n\t  \r\n\t  let pm = this;\r\n\t  \r\n\t  let pmid = pm.id || pm.HPaySiteMethodId;\r\n\t  let pmuid = pm.Uid;\r\n\t  \r\n\t  if(!((order.HPOSPaymentMethodId || order.CompanySitePaymentMethodId) == pmid || order.Data.pay_method_uid == pmuid))\r\n\t\t  return [];\r\n\t  \r\n\t  let handlers_url = \"https://sandbox.pay.holest.com/clientpay/handlers/payment/\";\r\n\t  if(typeof HPay !== 'undefined' && HPay && HPay.getMerchantSiteUid){\r\n\t\t  handlers_url += HPay.getMerchantSiteUid();\r\n\t  }else{\r\n\t\t  handlers_url += String(order.CompanySiteId);\r\n\t  }\r\n\t  handlers_url += (\"/\" + pm.Uid + \"/\" + order.Uid);\r\n\t  \r\n\t  let PaymentCurrency = pm.PaymentCurrency || pm.Data.parameters.PaymentCurrency;\r\n\t  let __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t  }\r\n\t  \r\n\t  let hactions = [\r\n\t\t{\r\n\t\t\tCaption: __(\"Status query...\"),\r\n\t\t\tOp: \"query\",\r\n\t\t\tRun: function(ord){\r\n\t\t\t\t\r\n\t\t\t\tlet req = {\r\n\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\tfetch(handlers_url + \"/queryRequest\",{\r\n\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\t\twindow.hpay_accept_op_data(r,r.request_type);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t  ];\r\n\t  \r\n\t  if(order.Transactions && order.Transactions.length){\r\n\t\t  hactions.push({\r\n\t\t\t    Caption: __(\"Sync on POS\"),\r\n\t\t\t\tOp: \"sync\",\r\n\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\tfetch(handlers_url + \"/syncOnPOS\",{\r\n\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t  });\r\n\t  }\r\n\t  \r\n\t  if(/PAYMENT\\:PAID|PAYMENT\\:PAYING|PAYMENT:RESERVED|PAYMENT:SUCCESS|PAYMENT:PARTIALLY-REFUNDED/.test(order.Status)){\r\n\t\t  \r\n\t\t  if(!/PAYMENT:PARTIALLY-REFUNDED/.test(order.Status)){\r\n\t\t\t  hactions.push({\r\n\t\t\t\t\tCaption: __(\"VOID\"),\r\n\t\t\t\t\tOp: \"void\",\r\n\t\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\thpay_confirm_dialog('<p style=\"padding:12px;\"><b>VOID</b> payment for order ' + ord.Name + \"?</p>\", \"\", __(\"OK\"), __(\"Cancel\")).then(is_ok => {\r\n\t\t\t\t\t\t\tif(is_ok){\r\n\t\t\t\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\t\t\t\tfetch(handlers_url + \"/voidRequest\",{\r\n\t\t\t\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\t\t\t\t\t\twindow.hpay_accept_op_data(r,\"void\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.error){\r\n\t\t\t\t\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r.error, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t  });\r\n\t\t  }\r\n\t\t  \r\n\t\t  let cap = null;\r\n\t\t  let op  = null;\r\n\t\t  \r\n\t\t  if(!/PAYMENT:RESERVED/.test(order.Status)){\r\n\t\t\t  cap = __(\"Refund\");\r\n\t\t      op  = \"refundRequest\";\r\n\t\t  }else{\r\n\t\t\t  cap = __(\"Capture\");\r\n\t\t      op  = \"captureRequest\";\r\n\t\t  }\r\n\t\t  \r\n\t\t  hactions.push({\r\n\t\t\t\t\tCaption: cap,\r\n\t\t\t\t\tOp: op.replace(\"Request\",\"\"),\r\n\t\t\t\t\tRun: function(ord){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet req = {\r\n\t\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet amt_hint  = \"\";\r\n\t\t\t\t\t\tlet refunded  = 0.00;\r\n\t\t\t\t\t\tlet curr_hint = PaymentCurrency;\r\n\t\t\t\t\t\tlet last_success_tran = null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(typeof _transactions !== undefined && !ord.Transactions){\r\n\t\t\t\t\t\t\tord.Transactions = _transactions.filter(t => t.OrderId == ord.id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ord.Transactions && ord.Transactions.length){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tord.Transactions.forEach(t => {\r\n\t\t\t\t\t\t\t\tif (typeof t.Data === 'string' || t.Data instanceof String){\r\n\t\t\t\t\t\t\t\t\tt.Data = JSON.parse(t.Data);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(t.Data && t.Data.result && /SUCCESS|PAID|RESERVED/.test(t.Status)){\r\n\t\t\t\t\t\t\t\t\tamt_hint  = t.Data.result.payment_amount;\r\n\t\t\t\t\t\t\t\t\tcurr_hint = t.Data.result.payment_currency;\r\n\t\t\t\t\t\t\t\t\tlast_success_tran = t;\r\n\t\t\t\t\t\t\t\t\tif(t.Data.result.refunded_amount){\r\n\t\t\t\t\t\t\t\t\t\trefunded += (parseFloat(t.Data.result.refunded_amount) || 0);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tamt_hint = parseFloat(parseFloat(amt_hint) - refunded).toFixed(2);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet minstallments_message = \"\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(last_success_tran && op == \"refundRequest\" && ord && ord.Data && ord.Data.monthly_installments){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(typeof last_success_tran.Data === 'string' || last_success_tran.Data instanceof String){\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tlast_success_tran.Data = JSON.parse(last_success_tran.Data);\r\n\t\t\t\t\t\t\t\t}catch(jex){\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tminstallments_message = \"<pre style='white-space: pre-wrap;font-size: 80%;background: #fffeed;padding: 10px;'>\";\r\n\t\t\t\t\t\t\tminstallments_message += \"Plaćanja sa ratama se ne mogu programski refundirati. Pošaljite mail sa sledećim podacima banci (za intesu: bo_pos@bancaintesa.rs):\\r\\n\";\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n1. Datum i vreme nastanka transakcije: <i class='nprefund-tdate' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n2. ID e commerce terminala: <i class='nprefund-mid' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n3. Poslednja 4 broja i naziv kartice: <i class='nprefund-card4' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n4. Autorizacija/Br. Odobrenja: <i class='nprefund-auth' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n5. Iznos RSD: <i class='nprefund-amt' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n6. Iznos za storno RSD: <i class='nprefund-ramt' contenteditable='true'>--</i>\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n7. Broj rata: \" + ord.Data.monthly_installments + \"\\r\\n\");\r\n\t\t\t\t\t\t\tminstallments_message += (\"\\r\\n7. Kada dobijete potvrdu od banke možete izvršiti 'Postavi kao da je refundirano'.\\r\\n\");\r\n\t\t\t\t\t\t\tminstallments_message += \"</pre>\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet qreq = {\r\n\t\t\t\t\t\t\t\torder_uid: ord.Uid,\r\n\t\t\t\t\t\t\t\trand: parseInt(Math.random() * 999999)\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tHPayGeneratePOSRequestSignature(qreq).then(vhash => {\r\n\t\t\t\t\t\t\t\tqreq.verificationhash = vhash;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfetch(handlers_url + \"/queryRequest\",{\r\n\t\t\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tbody: JSON.stringify(qreq)\r\n\t\t\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(r && r.Response){\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(!r.Extra){\r\n\t\t\t\t\t\t\t\t\t\t\tr.Extra = {};\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-tdate')) el.innerHTML = r.Extra.AUTH_DTTM || \"\"; \r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-mid')) el.innerHTML = r.mid || \"\"; \r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-card4')) {\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tif((r.Extra.PAN || \"\")[0] == \"9\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"DINA \";\r\n\t\t\t\t\t\t\t\t\t\t\t}else if((r.Extra.PAN || \"\")[0] == \"5\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"MASTER \";\r\n\t\t\t\t\t\t\t\t\t\t\t}else if((r.Extra.PAN || \"\")[0] == \"4\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"VISA \";\r\n\t\t\t\t\t\t\t\t\t\t\t}else if((r.Extra.PAN || \"\")[0] == \"3\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tel.innerHTML = \"AMEX \";\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tel.innerHTML += (r.Extra.PAN || \"\").substr(-4);\r\n\t\t\t\t\t\t\t\t\t\t}; \t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-auth')) el.innerHTML = last_success_tran.Data.result.gateway_resp.AuthCode; \r\n\t\t\t\t\t\t\t\t\t\t}catch(oc){}\r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-amt')) el.innerHTML = (parseFloat(r.Extra.ORIG_TRANS_AMT || \"0.00\") / 100).toFixed(2); \r\n\t\t\t\t\t\t\t\t\t\tfor(var el of document.getElementsByClassName('nprefund-ramt')) el.innerHTML = (parseFloat(r.Extra.ORIG_TRANS_AMT || \"0.00\") / 100).toFixed(2);; \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet cnt  = document.createElement(\"div\");\r\n\t\t\t\t\t\tlet size = \"normal\";\r\n\t\t\t\t\t\tlet ptbl = null;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ord && ord.Data && ord.Data.items && ord.Data.items.length){\r\n\t\t\t\t\t\t\tsize = 'medium';\r\n\t\t\t\t\t\t\tptbl = hpay_generate_items_payment_table(ord,op == \"refundRequest\" ? \"refund\" : \"capture\", null,curr_hint);\r\n\t\t\t\t\t\t\tcnt.appendChild(ptbl);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tcnt.innerHTML = '<p style=\"padding:12px;\"><b>' + cap + \"</b>: \" + ord.Name  + \"? \" + __(\"Please enter amount in the payment currency. Leave empty for the full amount\") + \": <input value='\" + (amt_hint || \"0.00\") +\"' sytyle='padding:6px' type='number' class='hpay-amount-prompt' /> \" + (curr_hint || \"\") + \".</p>\" + minstallments_message;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\thpay_confirm_dialog(cnt, size , minstallments_message ? __(\"Mark as refunded\") : __(\"OK\"), __(\"Cancel\")).then((is_ok) => {\r\n\r\n\t\t\t\t\t\t\tif(is_ok){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet inp = null;\r\n\t\t\t\t\t\t\t\tif(ptbl){\r\n\t\t\t\t\t\t\t\t\tinp = ptbl.querySelector(\".hpay-price-table-amount\");\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tinp = document.querySelector(\".hpay-amount-prompt:last-child\");\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif(inp){\r\n\t\t\t\t\t\t\t\t\tlet amount = inp.value;\r\n\t\t\t\t\t\t\t\t\tif(String(amount).trim()){\r\n\t\t\t\t\t\t\t\t\t\tamount = parseFloat(String(amount).trim());\r\n\t\t\t\t\t\t\t\t\t\treq.total = amount; \r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(ptbl){\r\n\t\t\t\t\t\t\t\t\tlet order_items = ord.Data.items;\r\n\t\t\t\t\t\t\t\t\tif(ptbl.hpay_dst_object){\r\n\t\t\t\t\t\t\t\t\t\tObject.values(ptbl.hpay_dst_object).forEach((item, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif(op == \"refundRequest\"){\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet refund_qty = parseInt(item.refund_qty) || 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet refund = parseFloat(item.refund ) || 0.00;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(refund > 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded = (parseFloat(order_items[index].refunded) || 0.00) +  refund;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(refund_qty){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].qty -= refund_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded_qty = (parseInt(order_items[index].refunded_qty) || 0) + refund_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet capture_qty = parseInt(item.capture_qty) || 0;\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet capture = parseFloat(item.capture ) || 0.00;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].captured = (parseFloat(order_items[index].captured) || 0) + capture;\r\n\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].captured_qty = parseInt(order_items[index].captured_qty || 0) + capture_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(order_items[index].captured < order_items[index].subtotal){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded += ((parseFloat(order_items[index].subtotal) || 0) - (parseFloat(order_items[index].captured) || 0));\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(order_items[index].captured_qty < order_items[index].qty){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].refunded_qty += (parseInt(order_items[index].qty) - parseInt(order_items[index].captured_qty));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder_items[index].qty = order_items[index].captured_qty;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\treq.order_items = order_items;\r\n\t\t\t\t\t\t\t\t\t\tif(ptbl.restock){\r\n\t\t\t\t\t\t\t\t\t\t\treq.restock = 1;\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(minstallments_message){\r\n\t\t\t\t\t\t\t\t\treq.manually_mark_refunded = 1;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tHPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\t\t\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\t\t\t\t\t\tfetch(handlers_url + \"/\" + op,{\r\n\t\t\t\t\t\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t\t\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\t\t\t\t\t\twindow.hpay_accept_op_data(r,op.replace(\"Request\",\"\"));\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif(r.error){\r\n\t\t\t\t\t\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r.error, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\")\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}).catch(err => {\r\n\t\t\t\t\t\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t  }\r\n\t  return hactions;\r\n  }",
                "subscriptionActions": "function(subscription){\r\n\t  \r\n  }",
                "transactionActions": "function(transaction){\r\n\t  \r\n  }"
            }
        ],
        "shipping": [
            {
                "HPaySiteMethodId": 124,
                "Uid": "dexpressrs",
                "Enabled": true,
                "ProcessGroup": null,
                "ShippingMethod": "dexpressrs",
                "SystemTitle": "D Express",
                "Instant": false,
                "Order": 0,
                "UTS": 1755946472000,
                "localized": {},
                "Name": "DExpress Isporuka",
                "Description": "Dostava kurirskom službom. Da bi videli paketomete u opciji isporuke u paket shop/paketomat navedite validan mobilni broj pre odabira.",
                "Auto-create Waybills": null,
                "Package Value Is COD Total": null,
                "Package Range Start": "0000000001",
                "Package Range End": "0000000099",
                "Urgent": null,
                "Dispenser Selector": true,
                "Locker Multi-item To Single Box": true,
                "Locker Limits": {
                    "Dim 1 - max cm": {
                        "Property": "Dim 1 - max cm",
                        "Value": "45",
                        "FallbackValue": "20"
                    },
                    "Dim 2 - max cm": {
                        "Property": "Dim 2 - max cm",
                        "Value": "42",
                        "FallbackValue": "20"
                    },
                    "Dim 3 - max cm": {
                        "Property": "Dim 3 - max cm",
                        "Value": "57",
                        "FallbackValue": "20"
                    },
                    "Waight - max g": {
                        "Property": "Waight - max g",
                        "Value": "20000",
                        "FallbackValue": "5000"
                    },
                    "Phone numbers regexp": {
                        "Property": "Phone numbers regexp",
                        "Value": "^(?:(?:381|00381)6[0-9]\\d{6,7}|0?6[0-9]\\d{6,7})$",
                        "FallbackValue": ""
                    },
                    "Disable for COD": {
                        "Property": "Disable for COD",
                        "Value": "1",
                        "FallbackValue": ""
                    }
                },
                "Default Items Per Box": 1,
                "Boxes Have Separate Barcodes": true,
                "Default Item Weight Grams": null,
                "Strict Checkout Input": true,
                "Pickup Warehouses": {
                    "default": {
                        "Uid": "default",
                        "Name": "Glavni magacin 1",
                        "PuClientID": ""
                    },
                    "skladiste2": {
                        "Uid": "skladiste2",
                        "Name": "Nase malo drugo skladiste",
                        "PuClientID": ""
                    }
                },
                "Bound Shipping Options": [],
                "Prices Include Vat": null,
                "Price Table": [
                    {
                        "MaxWeight": 500,
                        "Price": 360
                    },
                    {
                        "MaxWeight": 1000,
                        "Price": 440
                    },
                    {
                        "MaxWeight": 2000,
                        "Price": 490
                    },
                    {
                        "MaxWeight": 5000,
                        "Price": 650
                    },
                    {
                        "MaxWeight": 10000,
                        "Price": 860
                    },
                    {
                        "MaxWeight": 20000,
                        "Price": 1150
                    },
                    {
                        "MaxWeight": 30000,
                        "Price": 1400
                    },
                    {
                        "MaxWeight": 50000,
                        "Price": 1900
                    }
                ],
                "After Max Weight Price Per Kg": "40.00",
                "Payment By": "0",
                "Payment Type": "2",
                "Return Document/Cash": "0",
                "Additional cost": "0.00",
                "Free Above Order Amount": null,
                "After Order Message": "<h4>Kodovi za praćenje Vaših paketa:</h4> \n{% assign preparing_message = 0 %}\n{% for package in ShippingData %}\n\t{% if package[1].method_uid == method_uid %} \n         \n\t  {% assign item_status = package[1].status %}\n\t  {% assign item_status = item_status | replace: \"RESOLVING\", \"PROVERA PODATAKA\" %}\n\t  {% assign item_status = item_status | replace: \"PREPARING\", \"PRIPREMA\" %}\n\t  {% assign item_status = item_status | replace: \"READY\", \"SPREMNO\" %}\n\t  {% assign item_status = item_status | replace: \"SUBMITED\", \"KREIRANO\" %}\n\t  {% assign item_status = item_status | replace: \"DELIVERY\", \"DOSTAVLJA SE\" %}\n\t  {% assign item_status = item_status | replace: \"PARTIALLY-DELIVERED\", \"DELIMIČNO DOSTAVLJENO\" %}\n\t  {% assign item_status = item_status | replace: \"DELIVERED\", \"DOSTAVLJENO\" %}\n\t  {% assign item_status = item_status | replace: \"CANCELED\", \"OTKAZANO\" %}\n\t  {% assign item_status = item_status | replace: \"REVOKED\", \"OTKAZANO\" %}\n\t  <p style='border-top:1px solid gray'>\n\t  {% for shipping_item in package[1].items %}\n\t\t- {{ shipping_item.name }} x {{ shipping_item.qty }}<br/>\n\t  {% endfor %}\n\t  <b>{{ package[0] }}</b> ({{ item_status }}), <a target=\"_blank\" href=\"https://sandbox.pay.holest.com/clientpay/handlers/shipping/{{POS.id}}/{{method_uid}}/{{order.Uid}}/userTrackingView\">idi na link za praćenje...</a>\n\t  </p>\n\t  {% if package[1].status contains \"PREPARING\" %}\n\t\t{% assign preparing_message = 1 %}\n\t  {% endif %} \n         {% if package[1].status contains \"RESOLVING\" %}\n\t\t{% assign preparing_message = 1 %}\n\t  {% endif %} \n    {% endif %}  \n{% endfor %}\t\n{% if preparing_message == 1 %}\n<p>NAPOMENA: <b>podaci na linku za praćenje postaće dostupni kada obradimo Vašu narudžbinu.</b></p> \n{% endif %}\n",
                "ShippingCurrency": "RSD",
                "User Data": null,
                "On Delivery Trigger": null,
                "Minimal Order Amount": null,
                "Maximal Order Amount": null,
                "Excluded Countries": [],
                "Only For Countries": [],
                "Backend Name": null,
                "DispenserPossible": "function(hcart){\r\n\t\tlet possible = {\"locker\":0,\"packet-shop\":1};\r\n\t\tif(hcart && hcart.order_items && Object.values(hcart.order_items).length){\r\n\t\t\tlet items = Object.values(hcart.order_items).filter(itm => !itm.virtual && !/shipping|fee/.test(itm.type || \"\"));\r\n\t\t\tif(items && items.length){\r\n\t\t\t\tif(!this[\"Locker Multi-item To Single Box\"] && items.length > 1){\r\n\t\t\t\t\treturn possible;\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof hpay_items_fitable_in_locker === 'undefined' || !this['Locker Limits']){\r\n\t\t\t\t\tpossible.locker = items.length == 1;\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tpossible.locker = hpay_items_fitable_in_locker(this['Locker Limits'], items);\r\n\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\tconsole.error(ex);\r\n\t\t\t\t\t\tpossible.locker = items.length == 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(possible.locker && this[\"Locker Limits\"] && this[\"Locker Limits\"][\"Disable for COD\"] && /1|true|da|yes/i.test(this[\"Locker Limits\"][\"Disable for COD\"].Value || \"\")){\r\n\t\t\t\t\tif(hcart && hcart.order_shipping && hcart.order_shipping.is_cod){\r\n\t\t\t\t\t\tpossible.locker = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(possible.locker && this[\"Locker Limits\"] && this[\"Locker Limits\"][\"Phone numbers regexp\"] && String(this[\"Locker Limits\"][\"Phone numbers regexp\"].Value || \"\").trim()){\r\n\t\t\t\t\tlet phone = \"\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hcart.order_shipping && hcart.order_shipping.phone && String(hcart.order_shipping.phone).trim()){\r\n\t\t\t\t\t\tphone = String(hcart.order_shipping.phone).replace(/[^\\d]/g,'');\r\n\t\t\t\t\t}else if(hcart.order_billing && hcart.order_billing.phone && String(hcart.order_billing.phone).trim()){\r\n\t\t\t\t\t\tphone = String(hcart.order_billing.phone).replace(/[^\\d]/g,'');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!phone){\r\n\t\t\t\t\t\tpossible.locker = 0;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tif(!this.locketPhoneRegexp){\r\n\t\t\t\t\t\t\t\tthis.locketPhoneRegexp = new RegExp(String(this[\"Locker Limits\"][\"Phone numbers regexp\"].Value).trim());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!this.locketPhoneRegexp.test(phone)){\r\n\t\t\t\t\t\t\t\tpossible.locker = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\t\tconsole.log(ex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else\r\n\t\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn possible;\r\n\t}",
                "AdaptCheckout": "function(...args){\r\n\t\tlet mself = this;\r\n\t\treturn HPayInit().then(client => {\r\n\t\t\treturn client.loadHPayUI().then(loaded => {\r\n\t\t\t\tif(typeof hpay_adapt_checkout_for_shipping === 'function'){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\treturn hpay_adapt_checkout_for_shipping(client, mself, ...args);\r\n\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined;\r\n\t\t\t}); \r\n\t\t});\r\n\t}",
                "BeforeCheckoutCommit": "function(request_data){\r\n\t\tlet mself = this;\r\n\t\treturn HPayInit().then(client => {\r\n\t\t\treturn client.loadHPayUI().then(loaded => {\r\n\t\t\t\tif(typeof hpay_checkout_shipping_on_commit === 'function'){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\treturn hpay_checkout_shipping_on_commit(client, mself, request_data);\r\n\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined;\r\n\t\t\t}); \r\n\t\t});\r\n\t}",
                "renderTicket": "function(shipping_method, order, shipping_code, data, format, print_info){\r\n\t\treturn hpay_require_script(\"JsBarcode.all.min.js\").then(loaded => {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(!data){\r\n\t\t\t\tdata = hpay_normalized_shipping_data(order, shipping_code);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!print_info || typeof print_info !== 'object'){\r\n\t\t\t\tprint_info = {\r\n\t\t\t\t\tpage: \"\",\r\n\t\t\t\t\tlayout: print_info || \"\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet company = hpay_get_company();\r\n\t\t\tlet site    = hpay_get_pos();\r\n\t\t\t\r\n\t\t\tlet warehouse_name    = \"\";\r\n\t\t\tlet warehouse_address = \"\";\r\n\t\t\t\r\n\t\t\tlet whs = hpay_get_warehouses();\r\n\t\t\tif(data.shipping_warehouse && whs[data.shipping_warehouse]){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tif(whs[data.shipping_warehouse].StreetName && String(company.Address || \"\").toLowerCase().indexOf(whs[data.shipping_warehouse].StreetName.toLowerCase()) == -1){\r\n\t\t\t\t\t\twarehouse_name     = whs[data.shipping_warehouse].Name || data.shipping_warehouse;\r\n\t\t\t\t\t\twarehouse_address  = [whs[data.shipping_warehouse].StreetName,whs[data.shipping_warehouse].StreetNumber, whs[data.shipping_warehouse].PostalCode, whs[data.shipping_warehouse].City].filter(t => !!String(t || \"\")).join(\" \").trim();\r\n\t\t\t\t\t}\r\n\t\t\t\t}catch(ex){\r\n\t\t\t\t\t//\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet tmp = document.createElement(\"span\");\r\n\t\t\t\r\n\t\t\tlet html_dex = \"<h3 style='font-weight:bold;padding:1px;margin:0;display:flex;flex-direction: column;justify-content: space-between;'><span>D Express doo, Zage Malivuk 1, Beograd</span><span style='font-size:160%;font-weight:bold;text-align:right;' >\" + (print_info.page || \"\")  + \"</span></h3>\";\r\n\t\t\tlet html_sender = \"<h3 style='text-align:left;font-size:110%;font-weight:bold;padding:1px;margin:0;display:inline-block;'>Pošiljalac:</h3>\";\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(!String(warehouse_address).replace(/\\-|\\.| /g,'')){\r\n\t\t\t\twarehouse_address = company.Address;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\thtml_sender += \"<div>\";\r\n\t\t\thtml_sender += \"<p style='text-align:left;font-size:115%;font-weight:bold;'>\" + company.Name + (warehouse_name  ? (\"<br/>Iz magacina: \" + warehouse_name + \"<br/>\" + warehouse_address) :\"\") + \"</p>\";\r\n\t\t\thtml_sender += \"<p style='text-align:left;font-size:115%;font-weight:bold;'>\" + (site.CustomerServiceTel || \"\") + \"</p>\";\r\n\t\t\thtml_sender += \"</div>\";\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlet wtmpl = document.getElementById(\"hpay_shipping_barcode_tmpl\");\r\n\t\t\tif(!wtmpl){\r\n\t\t\t\twtmpl = document.createElement(\"div\");\r\n\t\t\t\twtmpl.setAttribute(\"id\",\"hpay_shipping_barcode_tmpl\");\r\n\t\t\t\tObject.assign(wtmpl.style,{\r\n\t\t\t\t\tdisplay:\"none!important\"\t\r\n\t\t\t\t});\r\n\t\t\t\tdocument.body.appendChild(wtmpl);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet return_val = \"\";\r\n\t\t\t\r\n\t\t\tlet weight     = 0;\r\n\t\t\tlet box_weight = 0;\r\n\t\t\t\r\n\t\t\tlet payer = \"Pošiljalac\";\r\n\t\t\t\r\n\t\t\tlet parameters = shipping_method.HPaySiteMethodId ? shipping_method : shipping_method.Data.parameters;\r\n\r\n\t\t\t\r\n\t\t\tif(parameters[\"Return Document/Cash\"] == \"2\"){\r\n\t\t\t\tpayer = \"Primalac\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(parameters[\"Return Document/Cash\"]){\r\n\t\t\t\tlet map = {\r\n\t\t\t\t\t\"0\":\"--\",\r\n\t\t\t\t\t\"1\":\"Dokument\",\r\n\t\t\t\t\t\"2\":\"Keš\",\r\n\t\t\t\t\t\"3\":\"Dokaz isporuke - POD\"\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\treturn_val = map[parameters[\"Return Document/Cash\"]] || \"--\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet code_to_print = shipping_code;\r\n\t\t\t\r\n\t\t\tif(data.shipping_items){\r\n\t\t\t\tObject.values(data.shipping_items).forEach(itm => {\r\n\t\t\t\t\tlet boxno = null;\r\n\t\t\t\t\tif(print_info.page){\r\n\t\t\t\t\t\tif(/^\\d*\\/\\d*$/.test(print_info.page)){\r\n\t\t\t\t\t\t\tboxno = parseInt(print_info.page.split(\"/\")[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(itm.weight){\r\n\t\t\t\t\t\tweight += parseFloat(itm.weight);\r\n\t\t\t\t\t\tif(boxno && boxno == itm.box_no){\r\n\t\t\t\t\t\t\tbox_weight += parseFloat(itm.weight);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(boxno && boxno == itm.box_no){\r\n\t\t\t\t\t\tif(boxno && boxno == itm.box_no){\r\n\t\t\t\t\t\t\tif(itm.box_code){\r\n\t\t\t\t\t\t\t\tcode_to_print = itm.box_code;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twtmpl.innerHTML = '<svg style=\"min-width:100%\" id=\"hpay_shipping_barcode_barcode\"></svg>';\r\n\t\t\t\r\n\t\t\tlet is6x2 = /6x2/.test(print_info.layout);\r\n\t\t\t\r\n\t\t\tJsBarcode(\"#hpay_shipping_barcode_barcode\", code_to_print,{ width: is6x2 ? 1 : 2, height: is6x2 ? 45 : 70 });\r\n\t\t\tlet html_barcode = wtmpl.innerHTML.replace(' id=\"hpay_shipping_barcode_barcode\"',\"\");\r\n\t\t\t\r\n\t\t\tlet html_recipient = \"<h3 style='font-size:120%;font-weight:bold;padding:1px;margin:0'>Primalac:</h3>\";\r\n\t\t\thtml_recipient += \"<pre style='line-height: 100%;font-weight:bold;text-align:center;font-size: 130%;white-space: pre-wrap;'>\\n\";\r\n\t\t\thtml_recipient += (data.delivery_data.name + \"\\n\");\r\n\t\t\thtml_recipient += (data.delivery_data.address + \" \" + data.delivery_data.address_number + (data.delivery_data.address_number_additional ? (\" \" + data.delivery_data.address_number_additional) : \"\" ) + \"\\n\");\r\n\t\t\thtml_recipient += (String(data.delivery_data.postcode) + \" \" + (data.delivery_data.city || \"\") + \" \" + String(data.delivery_data.country || \"\") + \"\\n\");\r\n\t\t\thtml_recipient += (String(data.delivery_data.phone) + \"\\n\");\r\n\t\t\thtml_recipient += \"</pre>\";\r\n\t\t\t\r\n\t\t\tlet html_table = \"<table style='width:100%;text-align:left;font-size:115%;font-weight:bold;padding:1px;margin:0;line-height: 90%;'>\";\r\n\t\t\thtml_table += (\"<tr><td>Referentni broj:</td><td style='text-align:right'>\" + (order.Uid || \"\") + \"</td></tr>\");\r\n\t\t\thtml_table += (\"<tr><td>Uslugu plaća:</td><td style='text-align:right'>\" + payer + \"</td></tr>\");\r\n\t\t\thtml_table += (\"<tr><td>Povratna dokumnetacija:</td><td style='text-align:right'>\" + return_val + \"</td></tr>\");\r\n\t\t\thtml_table += (\"<tr><td>Otkupnina:</td><td style='text-align:right'>\" + parseFloat(data.shipping_cod_amount || 0).toFixed(2) + \" \" + data.shipping_currency + \"</td></tr>\");\r\n\t\t\t\r\n\t\t\ttmp.innerHTML = data.delivery_data.content_desc;\r\n\t\t\thtml_table += (\"<tr><td>Sadrzaj:</td><td style='text-align:right'>\" + tmp.innerText + \"</td></tr>\");\r\n\t\t\t\r\n\t\t\tif(parseFloat(weight)){\r\n\t\t\t\tif(parseFloat(weight) > 1000){\r\n\t\t\t\t\tweight = (parseFloat(weight)/1000).toFixed(2) + \"kg\";\r\n\t\t\t\t\tbox_weight = (parseFloat(box_weight)/1000).toFixed(2) + \"kg\";\r\n\t\t\t\t}else if(parseFloat(weight)){\r\n\t\t\t\t\tweight = parseFloat(weight).toFixed(2) + \"g\";\r\n\t\t\t\t\tbox_weight = parseFloat(box_weight).toFixed(2) + \"g\";\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tweight = \"\";\r\n\t\t\t\tbox_weight = \"\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\thtml_table += (\"<tr><td>Masa:</td><td style='text-align:right'>\" + (box_weight ? (box_weight + \"/\") : \"\") + weight + \"</td></tr>\");\r\n\t\t\thtml_table += \"</table>\";\r\n\t\t\t\r\n\t\t\tlet iso_date = (new Date()).toISOString();\r\n\t\t\tlet sdate = iso_date.substring(8,10) + \".\" + iso_date.substring(5,7) + \".\" + iso_date.substring(0,4) + \" \" + iso_date.substring(11,13) + \":\" + iso_date.substring(14,16);\r\n\t\t\t\r\n\t\t\tlet html_time = \"<p style='font-weight:bold;font-size:115%;text-align:center:'>Vreme štampe:  \" + sdate + \"</p>\";\r\n\t\t\tlet html = \"\";\r\n\t\t\t\r\n\t\t\tif(is6x2){\r\n\t\t\t\thtml = \"<div style='display:flex;flex-direction: row;justify-content: stretch;padding:0;margin:0' >\";\r\n\t\t\t\thtml += (\"<div>\" + html_dex + html_sender + html_barcode + html_time + \"</div>\");\r\n\t\t\t\thtml += (\"<div>\" + html_recipient + html_table + \"</div>\");\r\n\t\t\t\thtml += \"</div>\";\r\n\t\t\t}else{\r\n\t\t\t\thtml = html_dex + html_sender + html_barcode + html_recipient + html_table + html_time;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet lfs = \"8px\";\r\n\t\t\tif(/1x|2x|3x/.test(print_info.layout)){\r\n\t\t\t\tlfs = \"10px\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn \"<div contenteditable='true' style='line-height: 120%;\" + (print_info.layout ? 'font-size:' + lfs + ';' : 'font-size:9px;max-width:320px;') + \"font-family:monospace;text-align:center;border: 1px solid black;padding:4px;display:inline-block'>\" + html + \"</div>\";\r\n\t\t});\r\n\t}",
                "orderListActions": "function(){\r\n\t\tlet sm = this;\r\n\t\t\r\n\t\tlet __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t    };\r\n\t\t\r\n\t\tif(!sm.ticket_layouts){\r\n\t\t  sm.ticket_layouts = {\r\n\t\t\t  \"\":\"Standard\",\r\n\t\t\t  \"6x2:A4\":\"6x2:A4\",\r\n\t\t\t  \"3x3:A4\":\"3x3:A4\",\r\n\t\t\t  \"3x2:A4\":\"3x2:A4\"\r\n\t\t  };\r\n\t    }\r\n\t  \r\n\t\treturn [\r\n\t\t {\r\n\t\t\tCaption: \"DEX \" + __(\"Štampa tiketa\"),\r\n\t\t\tRun: function(dataProvider, fromTime, toTime, search_str){\r\n\t\t\t\thpay_shipment_tickets(sm, dataProvider, fromTime, toTime, search_str);\r\n\t\t\t}\r\n\t\t }];\r\n\t}",
                "orderActions": "function(order){\r\n\t  if(!order)\r\n\t\t  return [];\r\n\t  \r\n\t  let sm = this;\r\n\t  \r\n\t  let __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t  };\r\n\t  \r\n\t  if(!sm.ticket_layouts){\r\n\t\t  sm.ticket_layouts = {\r\n\t\t\t  \"\":\"Standard\",\r\n\t\t\t  \"6x2:A4\":\"6x2:A4\",\r\n\t\t\t  \"3x3:A4\":\"3x3:A4\",\r\n\t\t\t  \"3x2:A4\":\"3x2:A4\"\r\n\t\t  };\r\n\t  }\t\r\n\r\n\t  let handlers_url = \"https://sandbox.pay.holest.com/clientpay/handlers/shipping/\";\r\n\t  if(typeof HPay !== 'undefined' && HPay && HPay.getMerchantSiteUid){\r\n\t\t  handlers_url += HPay.getMerchantSiteUid();\r\n\t  }else{\r\n\t\t  handlers_url += String(order.CompanySiteId);\r\n\t  }\r\n\t  \r\n\t  handlers_url += (\"/\" + sm.Uid + \"/\" + order.Uid);\t\r\n\r\n\t  let handle_action = async function(action, shipping_request, order){\r\n\t\t\t\r\n\t\t\tlet req = {\r\n\t\t\t\torder_uid: order.Uid,\r\n\t\t\t\trand: parseInt(Math.random() * 999999),\r\n\t\t\t\tshipment_action: action,\r\n\t\t\t\tshipping_request: shipping_request\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treturn HPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\r\n\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\treturn fetch(handlers_url + \"/saveShipment\",{\r\n\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\twindow.hpay_accept_op_data(r,\"shipping-update\");\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn r;\r\n\t\t\t\t}).catch(err =>{\r\n\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {error: err};\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t  };\r\n\t  \r\n\t  let hactions = [\r\n\t\t{\r\n\t\t\tCaption: \"➕ \" + (sm.Name || sm.Data.parameters.Name) + \"...\",\r\n\t\t\tRun: function(ord){\r\n\t\t\t\thpay_shipping_dialog(ord, sm , null, handle_action);\r\n\t\t\t}\r\n\t\t}\r\n\t  ];\r\n\t  \r\n\t  if(typeof hpay_get_environment_url === 'function'){\r\n\t\t  if(/sandbox/.test(hpay_get_environment_url())){\r\n\t\t\t  \r\n\t\t\t  if(!window.dex_simulate){\r\n\t\t\t\t  window.dex_simulate = function(order){\r\n\t\t\t\t\t  //////////////////////////////////////////////////\r\n\t\t\t\t\t  let code = \"\";\r\n\t\t\t\t\t  if(order.ShippingData){\r\n\t\t\t\t\t\t let s = Object.values(order.ShippingData).find(s => { return s.method_uid == sm.Uid });\r\n\t\t\t\t\t\t if(s){\r\n\t\t\t\t\t\t\t code = s.code;\r\n\t\t\t\t\t\t }\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  \r\n\t\t\t\t\t  let sel = '<p style=\"padding:12px;\" label=\"DEX STATUS:\"><select class=\"dex-test-status\">';\r\n\t\t\t\t\t  \r\n\t\t\t\t\t  Object.values(window.__dexstatuses).forEach(s => {\r\n\t\t\t\t\t\t  sel += ('<option value=\"' + s.ID + '\" ' + (s.ID == \"0\" ? \" selected='selected' \" : \"\") + '>' + s.Name + '</option>');\r\n\t\t\t\t\t  });\r\n\t\t\t\t\t  \r\n\t\t\t\t\t  sel += \"</select></p>\";\r\n\t\t\t\t\t  \r\n\t\t\t\t\t  hpay_confirm_dialog('<h4>TEST/SIMULATE NOTIFICATION:' + (order.Name || \"\") + '</h4><p style=\"padding:12px;\" label=\"Secret Code\"><input class=\"dex-test-secret-code\" type=\"password\" /></p>'\r\n\t\t\t\t\t\t\t\t\t\t +'<p style=\"padding:12px;\" label=\"Packet Code\"><input class=\"dex-test-packet-code\" type=\"text\" value=\"' + code + '\" /></p>' + sel, \"\", __(\"OK\"), __(\"Cancel\")).then(is_ok => {\r\n\t\t\t\t\t\t\tif(is_ok){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlet ccode = \"\";\r\n\t\t\t\t\t\t\t\tlet pcode = \"\";\r\n\t\t\t\t\t\t\t\tlet sid = \"\";\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(var inp of document.getElementsByClassName('dex-test-secret-code')) ccode = inp.value;\r\n\t\t\t\t\t\t\t\tfor(var inp of document.getElementsByClassName('dex-test-packet-code')) pcode = inp.value;\r\n\t\t\t\t\t\t\t\tfor(var inp of document.getElementsByClassName('dex-test-status')) sid = inp.value;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(ccode && pcode){\r\n\t\t\t\t\t\t\t\t\tfetch( handlers_url + \"/acceptNotification\", {method:\"POST\", headers:{\"Content-type\":\"application/json\"} , body:JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t\tcc: ccode,\r\n\t\t\t\t\t\t\t\t\t\tnID:\"simulte-test-\" + parseInt(Math.random() * 999999),\r\n\t\t\t\t\t\t\t\t\t\tcode: pcode,\r\n\t\t\t\t\t\t\t\t\t\trID: order.Uid,\r\n\t\t\t\t\t\t\t\t\t\tsID: sid, \r\n\t\t\t\t\t\t\t\t\t\tdt: \"nebitno\"\r\n\t\t\t\t\t\t\t\t\t})}).then(r=>r.text()).then(r=>{\r\n\t\t\t\t\t\t\t\t\t\thpay_alert_dialog(r);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\thpay_alert_dialog(\"Unesite Secret Code i Packet Code\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t   });\r\n\t\t\t\t\t   \r\n\t\t\t\t\t  let sec_code = \"\";\r\n\t\t\t\t\t  try{\r\n\t\t\t\t\t\t  sec_code = window.__sitesData[sessionStorage.site_id].site_shipping_methods[sm.id].Data.parameters[\"Notifications Secret Code\"];\r\n\t\t\t\t\t\t  if(sec_code){\r\n\t\t\t\t\t\t\t setTimeout(function(){\r\n\t\t\t\t\t\t\t\tfor(var inp of document.getElementsByClassName('dex-test-secret-code')) inp.value = sec_code;\t \r\n\t\t\t\t\t\t\t },300);  \r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t  }catch(ex){\r\n\t\t\t\t\t\t  //\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  //////////////////////////////////////////////////\r\n\t\t\t\t  };\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  hactions.push({\r\n\t\t\t\t  Caption: \"Simulate DEX notification\",\r\n\t\t\t\t  Run: function(ord){\r\n\t\t\t\t\t  if(!window.__dexstatuses){\r\n\t\t\t\t\t\t  fetch(handlers_url + \"/getAddressesData?return=statuses\").then(r=>r.json()).then(r=>{\r\n\t\t\t\t\t\t\t   window.__dexstatuses = r.statuses;\r\n\t\t\t\t\t\t\t   dex_simulate(ord);\r\n\t\t\t\t\t\t  }).catch(err => {\r\n\t\t\t\t\t\t\t // \r\n\t\t\t\t\t\t  });\r\n\t\t\t\t\t  }else{\r\n\t\t\t\t\t\t  dex_simulate(ord);\r\n\t\t\t\t\t  }\r\n\t\t\t\t  }\r\n\t\t\t  });\r\n\t\t  }\r\n\t  }\r\n\t  \r\n\t  if(order.ShippingData){\r\n\t\t  for(let code in order.ShippingData){\r\n\t\t\t  if(order.ShippingData.hasOwnProperty(code)){\r\n\t\t\t\t  \r\n\t\t\t\t  if(order.ShippingData[code].method_uid != sm.Uid)\r\n\t\t\t\t\t  continue;\r\n\t\t\t\t  \r\n\t\t\t\t  let wh = order.ShippingData[code].warehouse || \"default\";\r\n\t\t\t\t  if(wh == 'default'){\r\n\t\t\t\t\t  wh = \"\";\r\n\t\t\t\t  }else{\r\n\t\t\t\t\t  wh = \" (\" + wh + \")\";\r\n\t\t\t\t  }\r\n\t\t\t\t  \r\n\t\t\t\t  hactions.push({\r\n\t\t\t\t\t  Caption: String(code) + \"@\" + __(order.ShippingData[code].status) +  wh ,\r\n\t\t\t\t\t  Run: function(ord){\r\n\t\t\t\t\t\t  hpay_shipping_dialog(ord, sm, code, handle_action);\r\n\t\t\t\t\t  }\t\r\n\t\t\t\t  });\r\n\t\t\t  }\r\n\t\t  }\r\n\t  }\r\n\t  \r\n\t  return hactions;\r\n\t  \r\n\t }"
            },
            {
                "HPaySiteMethodId": 123,
                "Uid": "cityexpressrs",
                "Enabled": true,
                "ProcessGroup": null,
                "ShippingMethod": "cityexpressrs",
                "SystemTitle": "City Express",
                "Instant": false,
                "Order": 0,
                "UTS": 1755944337000,
                "localized": {},
                "Name": "CityExpress Isporuka",
                "Description": "Dostava kurirskom službom. Da bi videli paketomete u opciji isporuke u paket shop/paketomat navedite validan mobilni broj pre odabira.",
                "Auto Create and Submit": null,
                "Dispenser Selector": true,
                "Locker Multi-item To Single Box": false,
                "Locker Limits": {
                    "Dim 1 - max cm": {
                        "Property": "Dim 1 - max cm",
                        "Value": "45",
                        "FallbackValue": "20"
                    },
                    "Dim 2 - max cm": {
                        "Property": "Dim 2 - max cm",
                        "Value": "42",
                        "FallbackValue": "20"
                    },
                    "Dim 3 - max cm": {
                        "Property": "Dim 3 - max cm",
                        "Value": "57",
                        "FallbackValue": "20"
                    },
                    "Waight - max g": {
                        "Property": "Waight - max g",
                        "Value": "20000",
                        "FallbackValue": "5000"
                    },
                    "Phone numbers regexp": {
                        "Property": "Phone numbers regexp",
                        "Value": "^(?:(?:381|00381)6[0-9]\\d{6,7}|0?6[0-9]\\d{6,7})$",
                        "FallbackValue": ""
                    },
                    "Disable for COD": {
                        "Property": "Disable for COD",
                        "Value": "1",
                        "FallbackValue": ""
                    }
                },
                "Default Items Per Box": 1,
                "Default Item Weight Grams": null,
                "Strict Checkout Input": null,
                "Pickup Warehouses": {
                    "default": {
                        "Uid": "default",
                        "Name": "Glavni magacin 1",
                        "SenderID": "",
                        "Enabled": true
                    },
                    "skladiste2": {
                        "Uid": "skladiste2",
                        "Name": "Nase malo drugo skladiste",
                        "SenderID": ""
                    }
                },
                "Bound Shipping Options": [],
                "Prices Include Vat": true,
                "Price Table": [
                    {
                        "MaxWeight": 500,
                        "Price": 462
                    },
                    {
                        "MaxWeight": 2000,
                        "Price": 650
                    },
                    {
                        "MaxWeight": 5000,
                        "Price": 924
                    },
                    {
                        "MaxWeight": 10000,
                        "Price": 1146
                    },
                    {
                        "MaxWeight": 15000,
                        "Price": 1548
                    },
                    {
                        "MaxWeight": 20000,
                        "Price": 1626
                    },
                    {
                        "MaxWeight": 30000,
                        "Price": 2010
                    },
                    {
                        "MaxWeight": 50000,
                        "Price": 2856
                    },
                    {
                        "MaxWeight": 70000,
                        "Price": 3840
                    },
                    {
                        "MaxWeight": 100000,
                        "Price": 2016
                    }
                ],
                "After Max Weight Price Per Kg": "60.00",
                "CityExpress Notifications": "3",
                "Return Document": null,
                "Additional cost": "0.00",
                "COD cost": "0.00",
                "Free Above Order Amount": null,
                "After Order Message": "<h4>Kodovi za praćenje Vaših paketa:</h4> \n{% assign preparing_message = 0 %}\n{% for package in ShippingData %}\n\t{% if package[1].method_uid == method_uid %} \n         \n\t  {% assign item_status = package[1].status %}\n\t  {% assign item_status = item_status | replace: \"RESOLVING\", \"PROVERA PODATAKA\" %}\n\t  {% assign item_status = item_status | replace: \"PREPARING\", \"PRIPREMA\" %}\n\t  {% assign item_status = item_status | replace: \"READY\", \"SPREMNO\" %}\n\t  {% assign item_status = item_status | replace: \"SUBMITED\", \"KREIRANO\" %}\n\t  {% assign item_status = item_status | replace: \"DELIVERY\", \"DOSTAVLJA SE\" %}\n\t  {% assign item_status = item_status | replace: \"PARTIALLY-DELIVERED\", \"DELIMIČNO DOSTAVLJENO\" %}\n\t  {% assign item_status = item_status | replace: \"DELIVERED\", \"DOSTAVLJENO\" %}\n\t  {% assign item_status = item_status | replace: \"CANCELED\", \"OTKAZANO\" %}\n\t  {% assign item_status = item_status | replace: \"REVOKED\", \"OTKAZANO\" %}\n\t  <p style='border-top:1px solid gray'>\n\t  {% for shipping_item in package[1].items %}\n\t\t- {{ shipping_item.name }} x {{ shipping_item.qty }}<br/>\n\t  {% endfor %}\n\t  <b>{{ package[0] }}</b> ({{ item_status }})\n\t  </p>\n\t  <p><a target=\"_blank\" href=\"https://sandbox.pay.holest.com/clientpay/handlers/shipping/{{POS.id}}/{{method_uid}}/{{order.Uid}}/userTrackingView\">idi na link za praćenje...</a></p>\n\t  \n    {% endif %}  \n{% endfor %}\t\n\n",
                "ShippingCurrency": "RSD",
                "User Data": null,
                "On Delivery Trigger": null,
                "Minimal Order Amount": null,
                "Maximal Order Amount": null,
                "Excluded Countries": [],
                "Only For Countries": [],
                "Backend Name": null,
                "DispenserPossible": "function(hcart){\r\n\t\tlet possible = {\"locker\":0,\"packet-shop\":1};\r\n\t\tif(hcart && hcart.order_items && Object.values(hcart.order_items).length){\r\n\t\t\tlet items = Object.values(hcart.order_items).filter(itm => !itm.virtual && !/shipping|fee/.test(itm.type || \"\"));\r\n\t\t\tif(items && items.length){\r\n\t\t\t\tif(!this[\"Locker Multi-item To Single Box\"] && items.length > 1){\r\n\t\t\t\t\treturn possible;\r\n\t\t\t\t}\r\n\t\t\t\tif(typeof hpay_items_fitable_in_locker === 'undefined' || !this['Locker Limits']){\r\n\t\t\t\t\tpossible.locker = items.length == 1;\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tpossible.locker = hpay_items_fitable_in_locker(this['Locker Limits'], items);\r\n\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\tconsole.error(ex);\r\n\t\t\t\t\t\tpossible.locker = items.length == 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(possible.locker && this[\"Locker Limits\"] && this[\"Locker Limits\"][\"Disable for COD\"] && /1|true|da|yes/i.test(this[\"Locker Limits\"][\"Disable for COD\"].Value || \"\")){\r\n\t\t\t\t\tif(hcart && hcart.order_shipping && hcart.order_shipping.is_cod){\r\n\t\t\t\t\t\tpossible.locker = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(possible.locker && this[\"Locker Limits\"] && this[\"Locker Limits\"][\"Phone numbers regexp\"] && String(this[\"Locker Limits\"][\"Phone numbers regexp\"].Value || \"\").trim()){\r\n\t\t\t\t\tlet phone = \"\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hcart.order_shipping && hcart.order_shipping.phone && String(hcart.order_shipping.phone).trim()){\r\n\t\t\t\t\t\tphone = String(hcart.order_shipping.phone).replace(/[^\\d]/g,'');\r\n\t\t\t\t\t}else if(hcart.order_billing && hcart.order_billing.phone && String(hcart.order_billing.phone).trim()){\r\n\t\t\t\t\t\tphone = String(hcart.order_billing.phone).replace(/[^\\d]/g,'');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!phone){\r\n\t\t\t\t\t\tpossible.locker = 0;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tif(!this.locketPhoneRegexp){\r\n\t\t\t\t\t\t\t\tthis.locketPhoneRegexp = new RegExp(String(this[\"Locker Limits\"][\"Phone numbers regexp\"].Value).trim());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!this.locketPhoneRegexp.test(phone)){\r\n\t\t\t\t\t\t\t\tpossible.locker = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\t\tconsole.log(ex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else\r\n\t\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn possible;\r\n\t}",
                "AdaptCheckout": "function(...args){\r\n\t\tlet mself = this;\r\n\t\treturn HPayInit().then(client => {\r\n\t\t\treturn client.loadHPayUI().then(loaded => {\r\n\t\t\t\tif(typeof hpay_adapt_checkout_for_shipping === 'function'){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\treturn hpay_adapt_checkout_for_shipping(client, mself, ...args);\r\n\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined;\r\n\t\t\t}); \r\n\t\t});\r\n\t}",
                "BeforeCheckoutCommit": "function(request_data){\r\n\t\tlet mself = this;\r\n\t\treturn HPayInit().then(client => {\r\n\t\t\treturn client.loadHPayUI().then(loaded => {\r\n\t\t\t\tif(typeof hpay_checkout_shipping_on_commit === 'function'){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\treturn hpay_checkout_shipping_on_commit(client, mself, request_data);\r\n\t\t\t\t\t}catch(ex){\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn undefined;\r\n\t\t\t}); \r\n\t\t});\r\n\t}",
                "renderTicket": "function(shipping_method, order, shipping_code, data, format, print_info){\r\n\t\tif(!print_info || typeof print_info !== 'object'){\r\n\t\t\tprint_info = {\r\n\t\t\t\tpage: \"\",\r\n\t\t\t\tlayout: print_info || \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tlet boxno = null;\r\n\t\tif(print_info.page){\r\n\t\t\tif(/^\\d*\\/\\d*$/.test(print_info.page)){\r\n\t\t\t\tboxno = parseInt(print_info.page.split(\"/\")[0]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(!boxno){\r\n\t\t\tboxno = 1;\r\n\t\t}\r\n\t\t\r\n\t\tlet lfs = \"8px\";\r\n\t\tif(/1x|2x|3x/.test(print_info.layout)){\r\n\t\t\tlfs = \"10px\";\r\n\t\t}\r\n\t\tlet html = \"-- NALOG NIJE IZDAT --\";\r\n\t\tif(order.ShippingData && order.ShippingData[shipping_code] && order.ShippingData[shipping_code].submit_data){\r\n\t\t\tlet labels_url = order.ShippingData[shipping_code].submit_data.filter(sd => sd.label_url).map(sd => sd.label_url)[0];//same pdf for all boxes\r\n\t\t\tif(labels_url){\r\n\t\t\t\treturn hpay_require_script(\"pdf.min.js\").then(loaded => {\r\n\t\t\t\t\treturn pdfjsLib.getDocument({ url: \"https://sandbox.pay.holest.com/api/public/\" + labels_url.replace(/^\\//,'') }).promise.then(pdfDocument => {\r\n\t\t\t\t\t\treturn pdfDocument.getPage(boxno).then(page => {\r\n\t\t\t\t\t\t\tconst canvas = document.createElement('canvas');\r\n\t\t\t\t\t\t\tconst context = canvas.getContext('2d');\r\n\t\t\t\t\t\t\tconst viewport = page.getViewport({ scale: 3 }); // Adjust scale for better resolution\r\n\t\t\t\t\t\t\tcanvas.height = viewport.height;\r\n\t\t\t\t\t\t\tcanvas.width = viewport.width;\r\n\t\t\t\t\t\t\treturn page.render({\r\n\t\t\t\t\t\t\t\tcanvasContext: context,\r\n\t\t\t\t\t\t\t\tviewport: viewport\r\n\t\t\t\t\t\t\t}).promise.then(res => {\r\n\t\t\t\t\t\t\t\thtml = '<img style=\"max-width:320px;width:100%;height:auto;\" src=\"' + canvas.toDataURL('image/png') + '\" />';\r\n\t\t\t\t\t\t\t\treturn \"<div contenteditable='true' style='line-height: 120%;\" + (print_info.layout ? 'font-size:' + lfs + ';' : 'font-size:9px;max-width:320px;') + \"font-family:monospace;text-align:center;border: 1px solid black;padding:4px;display:inline-block'>\" + html + \"</div>\";\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn \"<div contenteditable='true' style='line-height: 120%;\" + (print_info.layout ? 'font-size:' + lfs + ';' : 'font-size:9px;max-width:320px;') + \"font-family:monospace;text-align:center;border: 1px solid black;padding:4px;display:inline-block'>\" + html + \"</div>\";\r\n\t}",
                "orderListActions": "function(){\r\n\t\tlet sm = this;\r\n\t\t\r\n\t\tlet __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t    };\r\n\t\t\r\n\t\tif(!sm.ticket_layouts){\r\n\t\t  sm.ticket_layouts = {\r\n\t\t\t  \"\":\"Standard\",\r\n\t\t\t  \"3x3:A4\":\"3x3:A4\",\r\n\t\t\t  \"2x2:A4\":\"2x2:A4\"\r\n\t\t  };\r\n\t    }\r\n\t  \r\n\t\treturn [\r\n\t\t {\r\n\t\t\tCaption: \"CITY EXPRESS \" + __(\"Štampa tiketa\"),\r\n\t\t\tRun: function(dataProvider, fromTime, toTime, search_str){\r\n\t\t\t\thpay_shipment_tickets(sm, dataProvider, fromTime, toTime, search_str);\r\n\t\t\t}\r\n\t\t }];\r\n\t}",
                "orderActions": "function(order){\r\n\t  if(!order)\r\n\t\t  return [];\r\n\t  \r\n\t  let sm = this;\r\n\t  \r\n\t  sm.ticket_requires_submit = true;\r\n\t  //sm.cancelable_on          = [];\r\n\t  sm.pdf_link = function(ord, shipment_code){\r\n\t\t  if(ord && shipment_code){\r\n\t\t\t  if(ord.ShippingData && ord.ShippingData[shipment_code] && ord.ShippingData[shipment_code].submit_data && ord.ShippingData[shipment_code].submit_data[0]){\r\n\t\t\t\t  return \"https://sandbox.pay.holest.com/api/public/\" + ord.ShippingData[shipment_code].submit_data[0].label_url.replace(/^\\//,'');\r\n\t\t\t  }\r\n\t\t  }\r\n\t\t  return false;\r\n\t  };\r\n\t  \r\n\t  let __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t  };\r\n\t  \r\n\t  if(!sm.ticket_layouts){\r\n\t\t  sm.ticket_layouts = {\r\n\t\t\t  \"\":\"Standard\"\r\n\t\t  };\r\n\t  }\t\r\n\t  \r\n\t  let handlers_url = \"https://sandbox.pay.holest.com/clientpay/handlers/shipping/\";\r\n\t  if(typeof HPay !== 'undefined' && HPay && HPay.getMerchantSiteUid){\r\n\t\t  handlers_url += HPay.getMerchantSiteUid();\r\n\t  }else{\r\n\t\t  handlers_url += String(order.CompanySiteId);\r\n\t  }\r\n\t  \r\n\t  handlers_url += (\"/\" + sm.Uid + \"/\" + order.Uid);\t\r\n\r\n\t  let handle_action = async function(action, shipping_request, order){\r\n\t\t\t\r\n\t\t\tlet req = {\r\n\t\t\t\torder_uid: order.Uid,\r\n\t\t\t\trand: parseInt(Math.random() * 999999),\r\n\t\t\t\tshipment_action: action,\r\n\t\t\t\tshipping_request: shipping_request\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treturn HPayGeneratePOSRequestSignature(req).then(vhash => {\r\n\t\t\t\treq.verificationhash = vhash;\r\n\t\t\t\t\r\n\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.enterClientWait()};\r\n\t\t\t\treturn fetch(handlers_url + (/syncOrder/.test(action) ? (\"/\" + action) : \"/saveShipment\"),{\r\n\t\t\t\t\tmethod:\"POST\",\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t  'Content-Type': 'application/json; charset=utf-8'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify(req)\r\n\t\t\t\t}).then(r => r.json()).then(r => {\r\n\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\tif(r.order){\r\n\t\t\t\t\t\twindow.hpay_accept_op_data(r,\"shipping-update\");\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\thpay_alert_dialog(\"<pre>\" + JSON.stringify(r, null, 2).replace(/\\\"|\\{|\\}|\\,/g,\"\") + \"</pre>\",\"large\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn r;\r\n\t\t\t\t}).catch(err =>{\r\n\t\t\t\t\tif(typeof HPay !== 'undefined' && HPay){HPay.exitClientWait()};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {error: err};\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t  };\r\n\t  \r\n\t  let hactions = [\r\n\t\t{\r\n\t\t\tCaption: \"➕ \" + (sm.Name || sm.Data.parameters.Name) + \"...\",\r\n\t\t\tRun: function(ord){\r\n\t\t\t\thpay_shipping_dialog(ord, sm , null, handle_action);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tCaption: \"↻\",\r\n\t\t\tRun: function(ord){\r\n\t\t\t\thandle_action(\"syncOrder\", {}, ord);\r\n\t\t\t}\r\n\t\t}\r\n\t  ];\r\n\t  \r\n\t  if(order.ShippingData){\r\n\t\t  for(let code in order.ShippingData){\r\n\t\t\t  if(order.ShippingData.hasOwnProperty(code)){\r\n\t\t\t\t  if(order.ShippingData[code].method_uid != sm.Uid)\r\n\t\t\t\t\t  continue;\r\n\t\t\t\t  \r\n\t\t\t\t  let wh = order.ShippingData[code].warehouse || \"default\";\r\n\t\t\t\t  if(wh == 'default'){\r\n\t\t\t\t\t  wh = \"\";\r\n\t\t\t\t  }else{\r\n\t\t\t\t\t  wh = \" (\" + wh + \")\";\r\n\t\t\t\t  }\r\n\t\t\t\t  \r\n\t\t\t\t  hactions.push({\r\n\t\t\t\t\t  Caption: String(code) + \"@\" + __(order.ShippingData[code].status) +  wh ,\r\n\t\t\t\t\t  Run: function(ord){\r\n\t\t\t\t\t\t  hpay_shipping_dialog(ord, sm, code, handle_action);\r\n\t\t\t\t\t  }\t\r\n\t\t\t\t  });\r\n\t\t\t  }\r\n\t\t  }\r\n\t  }\r\n\t  return hactions;\r\n\t}"
            }
        ],
        "fiscal": [
            {
                "HPaySiteMethodId": 137,
                "Uid": "efiscalrs",
                "Enabled": true,
                "ProcessGroup": null,
                "FiscalMethod": "efiscalrs",
                "SystemTitle": "E-Fiskalizacija u republici Srbiji",
                "Order": 0,
                "UTS": 1755944297000,
                "localized": {},
                "PIB": "000000000",
                "Name": "Fiskalni račun",
                "Description": "Fiskalni račun",
                "Default Tax Label": "N",
                "Default Payment Method": "TotalOther",
                "POS tax label mappings": null,
                "Only Manual": null,
                "Notify Fiscal Document": null,
                "Auto refund/recall after payment VOID": null,
                "Auto refund/recall after payment REFUND": null,
                "Advance Available": null,
                "Proforma Available": null,
                "Skip skus": null,
                "Skip names": null,
                "Excluded Countries": [],
                "Only For Countries": [],
                "Backend Name": null,
                "orderActions": "function(order){\r\n\t  let fm = this;\r\n\t  let __ = function(str){\r\n\t\t  try{\r\n\t\t\t  return t(str);\r\n\t\t  }catch(ex){\r\n\t\t\t  return str;\r\n\t\t  }\r\n\t  };\r\n\t  \r\n\t  return [\r\n\t\t{\r\n\t\t\tCaption: __(\"Fiskal >>\"),\r\n\t\t\tRun: function(ord){\r\n\t\t\t\thpay_ficalrs_dialog(ord, fm);\r\n\t\t\t}\r\n\t\t}\r\n\t  ]\r\n  }",
                "subscriptionActions": "function(subscription){\r\n\t  \r\n  }",
                "transactionActions": "function(transaction){\r\n\t  \r\n  }"
            }
        ],
        "posuts": 1755946574000,
        "HPaySiteId": 320,
        "ExchanageCorrection": 0,
        "ExchanageSource": "RSD",
        "FixedLanguage": "",
        "pos_parameters": {
            "Shop Name": "MAGENTO SHOP TEST 1",
            "Shared Vault Store": "",
            "Email BCC for all client emails": "",
            "Frontend Script-Core Origins": "",
            "Require Billing and Shipping": "",
            "Input Form Style": {
                "textfiledvariant": "filled",
                "textfiledsize": "small",
                "textfiledmargin": "none",
                "primaryColor": "#052864",
                "borderRadius": "0",
                "inputBackgroundColor": "#FBFBFB",
                "inputHoverBackgroundColor": "#F0F0F0",
                "color": "#595959",
                "borderColor": "#595959",
                "fontSize": "0.9em",
                "fontFamily": "sans-serif",
                "fontStyle": "normal",
                "errorColor": "#FF0000",
                "smallTextColor": "#777777",
                "smallTextSize": "0.6em",
                "mediumTextColor": "#777777",
                "mediumTextSize": "0.7em",
                "buttonPrimaryBackgroundColor": "#03122c",
                "buttonSecondaryBackgroundColor": "#BBBBBB",
                "buttonColor": "#FFFFFF",
                "panelTransparentOff": false,
                "panelBackgroundColor": "#FFFFFF"
            },
            "Docked Input": false,
            "Logotypes Card Images": "https://pay.holest.com/static/branding/MASTER.png\nhttps://pay.holest.com/static/branding/MAESTRO.png\nhttps://pay.holest.com/static/branding/VISA.png\nhttps://pay.holest.com/static/branding/DINA.png\nhttps://pay.holest.com/static/branding/AMEX.png",
            "Logotypes Banks": "https://pay.holest.com/static/branding/INTESA.png:https://www.bancaintesa.rs/\nhttps://pay.holest.com/static/branding/IPS.png:https://ips.nbs.rs/",
            "Logotypes 3DS": "https://pay.holest.com/static/branding/VISA_SECURE.png:https://rs.visa.com/pay-with-visa/security-and-assistance/protected-everywhere.html\nhttps://pay.holest.com/static/branding/MASTER_ID_CHECK_V.png:https://www.mastercard.rs/sr-rs/consumers/find-card-products/credit-cards.html"
        }
    },
    "environment": "sandbox",
    "merchant_site_uid": "b829cca8-b762-4bee-9ebb-ca5a6665618e",
    "checkstr": "b803985a9a02458252c6f28972c799e3"
}